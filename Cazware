local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Cazware",
   LoadingTitle = "loading...",
   LoadingSubtitle = "by Caz",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Cazware",
      Discord = {},
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Cazware",
      Subtitle = "Key System",
      Note = "private lock",
      FileName = "Cazware", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false , -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Cazwaretaps"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})
 
local MainTab = Window:CreateTab("Home", nill) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
    Title = "Loaded",
    Content = "Cazware",
    Duration = 4,
    Image = nill,
    Actions = { -- Notification Buttons
       Ignore = {
          Name = "Okay!",
          Callback = function()
          print("The user tapped Okay!")
       end
    },
 },
 })

local Button = MainTab:CreateButton({
   Name = "locl",
   Callback = function()
  getgenv().Aimbot = {
    Status = true,
    Keybind  = 'C',
    Hitpart = 'HumanoidRootPart',
    ['Prediction'] = {
        X = 0.063221,
        Y = 0.063221,
    },
}
 
if getgenv().AimbotRan then
    return
else
    getgenv().AimbotRan = true
end
-- make it reexecutable to update settings
 
 
local RunService = game:GetService('RunService')
local Workspace = game:GetService('Workspace')
local Players = game:GetService('Players')
 
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()
 
local Player = nil -- Our target player
 
 
local GetClosestPlayer = function() -- // Optimized GetClosestPlayer i believe?
    local ClosestDistance, ClosestPlayer = 100000, nil
    for _, Player : Player in pairs(Players:GetPlayers()) do
        if Player.Name ~= LocalPlayer.Name and Player.Character and Player.Character:FindFirstChild('HumanoidRootPart') then
            local Root, Visible = Camera:WorldToScreenPoint(Player.Character.HumanoidRootPart.Position)
            if not Visible then
                continue
            end
            Root = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(Root.X, Root.Y)).Magnitude
            if Root < ClosestDistance then
                ClosestPlayer = Player
                ClosestDistance = Root
            end
        end
    end
    return ClosestPlayer
end
 
Mouse.KeyDown:Connect(function(key) -- Get our closest player (toggle)
    if key == Aimbot.Keybind:lower() then
        Player = not Player and GetClosestPlayer() or nil
    end
end)
 
RunService.RenderStepped:Connect(function()
    if not Player then
        return
    end
    if not Aimbot.Status then
        return
    end
    local Hitpart = Player.Character:FindFirstChild(Aimbot.Hitpart)
    if not Hitpart then
        return
    end
    Camera.CFrame = CFrame.new(Camera.CFrame.Position, Hitpart.Position + Hitpart.Velocity * Vector3.new(Aimbot.Prediction.X, Aimbot.Prediction.Y, Aimbot.Prediction.X))
end)

   end,
})
 
local EspTab = Window:CreateTab("Esp")

local Button = EspTab:CreateButton({
    Name = "Box esp",
    Callback = function()
        local settings = {
            defaultcolor = Color3.fromRGB(255,0,0),
            teamcheck = false,
            teamcolor = true
         };
          
         -- services
         local runService = game:GetService("RunService");
         local players = game:GetService("Players");
          
         -- variables
         local localPlayer = players.LocalPlayer;
         local camera = workspace.CurrentCamera;
          
         -- functions
         local newVector2, newColor3, newDrawing = Vector2.new, Color3.new, Drawing.new;
         local tan, rad = math.tan, math.rad;
         local round = function(...) local a = {}; for i,v in next, table.pack(...) do a[i] = math.round(v); end return unpack(a); end;
         local wtvp = function(...) local a, b = camera.WorldToViewportPoint(camera, ...) return newVector2(a.X, a.Y), b, a.Z end;
          
         local espCache = {};
         local function createEsp(player)
            local drawings = {};
          
            drawings.box = newDrawing("Square");
            drawings.box.Thickness = 1;
            drawings.box.Filled = false;
            drawings.box.Color = settings.defaultcolor;
            drawings.box.Visible = false;
            drawings.box.ZIndex = 2;
          
            drawings.boxoutline = newDrawing("Square");
            drawings.boxoutline.Thickness = 3;
            drawings.boxoutline.Filled = false;
            drawings.boxoutline.Color = newColor3();
            drawings.boxoutline.Visible = false;
            drawings.boxoutline.ZIndex = 1;
          
            espCache[player] = drawings;
         end
          
         local function removeEsp(player)
            if rawget(espCache, player) then
                for _, drawing in next, espCache[player] do
                    drawing:Remove();
                end
                espCache[player] = nil;
            end
         end
          
         local function updateEsp(player, esp)
            local character = player and player.Character;
            if character then
                local cframe = character:GetModelCFrame();
                local position, visible, depth = wtvp(cframe.Position);
                esp.box.Visible = visible;
                esp.boxoutline.Visible = visible;
          
                if cframe and visible then
                    local scaleFactor = 1 / (depth * tan(rad(camera.FieldOfView / 2)) * 2) * 1000;
                    local width, height = round(4 * scaleFactor, 5 * scaleFactor);
                    local x, y = round(position.X, position.Y);
          
                    esp.box.Size = newVector2(width, height);
                    esp.box.Position = newVector2(round(x - width / 2, y - height / 2));
                    esp.box.Color = settings.teamcolor and player.TeamColor.Color or settings.defaultcolor;
          
                    esp.boxoutline.Size = esp.box.Size;
                    esp.boxoutline.Position = esp.box.Position;
                end
            else
                esp.box.Visible = false;
                esp.boxoutline.Visible = false;
            end
         end
          
         -- main
         for _, player in next, players:GetPlayers() do
            if player ~= localPlayer then
                createEsp(player);
            end
         end
          
         players.PlayerAdded:Connect(function(player)
            createEsp(player);
         end);
          
         players.PlayerRemoving:Connect(function(player)
            removeEsp(player);
         end)
          
         runService:BindToRenderStep("esp", Enum.RenderPriority.Camera.Value, function()
            for player, drawings in next, espCache do
                if settings.teamcheck and player.Team == localPlayer.Team then
                    continue;
                end
          
                if drawings and player ~= localPlayer then
                    updateEsp(player, drawings);
                end
            end
         end)
         
    end,
 })



local Button = MainTab:CreateButton({
   Name = "Macro lock",
   Callback = function()
getgenv().Aimbot = {
    Status = true,
    Keybind  = 'C',
    Hitpart = 'HumanoidRootPart',
    ['Prediction'] = {
        X = 0.2,
        Y = 0.2,
    },
}
 
if getgenv().AimbotRan then
    return
else
    getgenv().AimbotRan = true
end
-- make it reexecutable to update settings
 
 
local RunService = game:GetService('RunService')
local Workspace = game:GetService('Workspace')
local Players = game:GetService('Players')
 
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()
 
local Player = nil -- Our target player
 
 
local GetClosestPlayer = function() -- // Optimized GetClosestPlayer i believe?
    local ClosestDistance, ClosestPlayer = 100000, nil
    for _, Player : Player in pairs(Players:GetPlayers()) do
        if Player.Name ~= LocalPlayer.Name and Player.Character and Player.Character:FindFirstChild('HumanoidRootPart') then
            local Root, Visible = Camera:WorldToScreenPoint(Player.Character.HumanoidRootPart.Position)
            if not Visible then
                continue
            end
            Root = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(Root.X, Root.Y)).Magnitude
            if Root < ClosestDistance then
                ClosestPlayer = Player
                ClosestDistance = Root
            end
        end
    end
    return ClosestPlayer
end
 
Mouse.KeyDown:Connect(function(key) -- Get our closest player (toggle)
    if key == Aimbot.Keybind:lower() then
        Player = not Player and GetClosestPlayer() or nil
    end
end)
 
RunService.RenderStepped:Connect(function()
    if not Player then
        return
    end
    if not Aimbot.Status then
        return
    end
    local Hitpart = Player.Character:FindFirstChild(Aimbot.Hitpart)
    if not Hitpart then
        return
    end
    Camera.CFrame = CFrame.new(Camera.CFrame.Position, Hitpart.Position + Hitpart.Velocity * Vector3.new(Aimbot.Prediction.X, Aimbot.Prediction.Y, Aimbot.Prediction.X))
end)

   end,
})
